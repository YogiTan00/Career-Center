// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	account "CareerCenter/domain/entity/account"
	context "context"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// UseCaseAccount is an autogenerated mock type for the UseCaseAccount type
type UseCaseAccount struct {
	mock.Mock
}

// ChangeRoleByAdmin provides a mock function with given fields: ctx, data
func (_m *UseCaseAccount) ChangeRoleByAdmin(ctx context.Context, data *account.AccountDTO) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *account.AccountDTO) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ForgetPassword provides a mock function with given fields: ctx, email
func (_m *UseCaseAccount) ForgetPassword(ctx context.Context, email string) error {
	ret := _m.Called(ctx, email)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Login provides a mock function with given fields: ctx, data
func (_m *UseCaseAccount) Login(ctx context.Context, data *account.AccountDTO) (*http.Cookie, *account.Login, error) {
	ret := _m.Called(ctx, data)

	var r0 *http.Cookie
	var r1 *account.Login
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *account.AccountDTO) (*http.Cookie, *account.Login, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *account.AccountDTO) *http.Cookie); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Cookie)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *account.AccountDTO) *account.Login); ok {
		r1 = rf(ctx, data)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*account.Login)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *account.AccountDTO) error); ok {
		r2 = rf(ctx, data)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Register provides a mock function with given fields: ctx, data
func (_m *UseCaseAccount) Register(ctx context.Context, data *account.AccountDTO) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *account.AccountDTO) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePassword provides a mock function with given fields: ctx, email, password
func (_m *UseCaseAccount) UpdatePassword(ctx context.Context, email string, password *account.UpdatePasswordDTO) error {
	ret := _m.Called(ctx, email, password)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *account.UpdatePasswordDTO) error); ok {
		r0 = rf(ctx, email, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUseCaseAccount interface {
	mock.TestingT
	Cleanup(func())
}

// NewUseCaseAccount creates a new instance of UseCaseAccount. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUseCaseAccount(t mockConstructorTestingTNewUseCaseAccount) *UseCaseAccount {
	mock := &UseCaseAccount{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
