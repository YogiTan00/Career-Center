// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	entity "CareerCenter/domain/entity"
	filter "CareerCenter/domain/entity/filter"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// UseCaseJobs is an autogenerated mock type for the UseCaseJobs type
type UseCaseJobs struct {
	mock.Mock
}

// GetJobById provides a mock function with given fields: ctx, id
func (_m *UseCaseJobs) GetJobById(ctx context.Context, id string) (*entity.JobsDTO, error) {
	ret := _m.Called(ctx, id)

	var r0 *entity.JobsDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.JobsDTO, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.JobsDTO); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.JobsDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetListJobs provides a mock function with given fields: ctx, f
func (_m *UseCaseJobs) GetListJobs(ctx context.Context, f *filter.FilterDTO) ([]*entity.JobsDTO, error) {
	ret := _m.Called(ctx, f)

	var r0 []*entity.JobsDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *filter.FilterDTO) ([]*entity.JobsDTO, error)); ok {
		return rf(ctx, f)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *filter.FilterDTO) []*entity.JobsDTO); ok {
		r0 = rf(ctx, f)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.JobsDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *filter.FilterDTO) error); ok {
		r1 = rf(ctx, f)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUseCaseJobs interface {
	mock.TestingT
	Cleanup(func())
}

// NewUseCaseJobs creates a new instance of UseCaseJobs. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUseCaseJobs(t mockConstructorTestingTNewUseCaseJobs) *UseCaseJobs {
	mock := &UseCaseJobs{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
